{"0": {
    "doc": "Activities",
    "title": "Activities",
    "content": "Get Activities endpoint . Returns all activities that could be used on bookings. Parameters: . | pool string to identify the Wherewolf app requesting the list of activities. | skip integer to indicate how many records are to be skipped. | . Headers: . | API-key API key to authenticate the request. | . Request example . curl -X GET \\ __BOOKING_SYSTEM_API__/activities?pool=wherewfolapp123&amp;skip=0 \\ -H 'API-key: 123-123-123-123' . Where BOOKING_SYSTEM_API is a placeholder for the base url of your booking system’s API . The response is expected to return an object containing at least two properties: . | activities an array of activity objects, where each object should at least contain the name of the activity and it’s internal id or code. | more a boolean flag to indicate if there are more activities available to be retrieved with pagination. When set to true, Wherewolf will execute a subsequent call with skip set to be the number of already retrieved activities skip += bookings.length. | . Response example . { \"activities\": [ { \"activityId\": \"SWIM123\", \"name\": \"Swim\" }, { \"activityId\": \"DIVE1\", \"name\": \"Dive\" }, { \"activityId\": \"JMP\", \"name\": \"Jump\" } ], \"more\": false } . ",
    "url": "/docs/integrations/endpoints/activities.html",
    "relUrl": "/docs/integrations/endpoints/activities.html"
  },"1": {
    "doc": "Public API",
    "title": "Public API",
    "content": "Public API . Clients have access to Wherewolf’s API . Some Considerations . | The Wherewolf API is a RESTful JSON API. | All API calls should be made with HTTP POST. | You can consider any non-200 HTTP response code an error - the returned data will contain more detailed information | All methods are accessed via: https://api.wherewolf.co.nz/SECTION/SOME-METHOD | Request data is passed to the API by POSTing JSON objects to the API endpoints with the appropriate parameters. The documentation for each API call will contain more detail on the parameters accepted by the call. | HTTPS is 100% supported with valid, signed certificates for all API methods. Only HTTPS over 443 is accepted. | . ",
    "url": "/docs/api",
    "relUrl": "/docs/api"
  },"2": {
    "doc": "Authentication Options",
    "title": "Authentication Options",
    "content": "Authentication . We encourage you to protect your endpoint by requiring one of the following authentication methods: . | Custom Header | Basic Auth | . Custom Header Authentication . Wherewolf’s webhook requests can be configured to include a custom header, you can use this to authenticate the request. When configured, the request will contain the custom field and custom value. Example: . curl -X POST \\ __YOUR_URL__ \\ -H 'Cache-Control: no-cache' \\ -H 'Content-Type: application/json' \\ -H '__CUSTOM_AUTH_FIELD__: __CUSTOM_AUTH_VALUE__' \\ -d '{ ...payload... }' . Basic Auth Authentication . Basic Auth method is supported for Wherewolf’s webhook requests. When configured, the request will contain a Authorization header with the base64 representation of a given username:password. Example using username an_user and password a_password: . curl -X POST \\ __YOUR_URL__ \\ -H 'Cache-Control: no-cache' \\ -H 'Content-Type: application/json' \\ -H 'Authorization: Basic YW5fdXNlcjphX3Bhc3N3b3Jk' \\ -d '{ ...payload... }' . For more details about Basic Auth: . MDN Web Docs HTTP authentication . ",
    "url": "/docs/webhooks/authentication.html",
    "relUrl": "/docs/webhooks/authentication.html"
  },"3": {
    "doc": "Booking definition",
    "title": "Booking definition",
    "content": "What is a booking? . A booking is the arrangement that you make when you book something such as a hotel room, a table at a restaurant, a theatre seat, or a place on public transport. Collins English Dictionary . For the purposes of an integration with Wherewolf, a booking is a JSON object that describes who booked what and when. In other words, a booking is the expectation that someone will get or do something at an agreed date and time . Find the structure of this JSON object on Bookings Details endpoint. WHO - Who is the booking for? . A booking needs to define who benefits from it. It could be one or multiple persons, they are known as guests. The total number of guests is known as pax. WHAT - What is being booked? . A booking must also define what the guests booked. This is a product or service and could be anything from a guided tour to a rental kayak. Bookings can contain one or more products or services. For the purposes of Wherewolf’s API this is known as activities. WHEN - When is the booking due? . Bookings, are expectations. A guest is expected to get or do something at some point in the future. This point in time is the pillar of a booking, bookings must define a point in time. A booking can define only one date and time. If someone needs to book multiple dates, these are by definition multiple bookings. ",
    "url": "/docs/integrations/booking_definition.html",
    "relUrl": "/docs/integrations/booking_definition.html"
  },"4": {
    "doc": "Booking details",
    "title": "Booking details",
    "content": "Bookings Details endpoint . Returns all available details of a booking. Parameters: . | id string or integer to indicate the required booking. It can be included as part of the path bookings/ABC123 or as a query parameter bookings?id=ABC123 | pool string to identify the Wherewolf app requesting the booking details. | . Headers: . | api-key API key to authenticate the request, this can have other name such as ‘authentication’. | . Request example . curl -X GET \\ __BOOKING_SYSTEM_API__/bookings?id=ABC123&amp;pool=wherewfolapp123 \\ -H 'api-key: 123-123-123-123' . Where BOOKING_SYSTEM_API is a placeholder for the base url of your booking system’s API . The response is expected to return an object containing at least the following details: . | id identifier the booking | status the booking status. Check the supported statuses here. | startsAt the start date and time of the booked activity. In UTC ISO 8601. | endsAt the end date and time of the booked activity. In UTC ISO 8601. | activities an array describing the booked activities. | contact an object containing the name the main guest or booker, when available this object should also contain email address and/or a phone number. | pax an integer to indicate how many guests are expected to be checked-in for this booking. | guests an array of objects containing any additional details for the expected guests. Note: if your system does not support individual guest details or is not required, you can return an empty array. | . Guests . A booking may or not contain individual guests details. When not available, it is ok to leave the guests field as an empty array. When guests details are available, each guest object must contain a name and optionally other details such as email, phoneNumber or any other relevant data you wish to expose to Wherewolf with the purpose of autocompletion. When available, Wherewolf will autocomplete name (string), email (string) and phoneNumber (string) for the guest completing a waiver. Any other available field could be exposed by your system to be used by Wherewolf but these will be used only after custom configuration is set (you may also expose different field for different clients). Response example . { \"id\": \"ABC123\", \"status\": \"Active\", \"notes\": \"notes or other properties at booking level will extend the properties of the guest\", \"startsAt\": \"2018-01-27T11:30:00\", \"endsAt\": \"2018-01-27T13:30:00\", \"activities\": [ { \"activity\": \"Swim\", \"activityId\": \"SWIM123\" }, { \"activity\": \"Dive\", \"activityId\": \"DIVE1\" } ], \"contact\": { \"name\": \"Purchaser Name\", \"email\": \"purchaser@email.net\", \"phoneNumber\": \"(64) 021021021021\" }, \"pax\": 2, \"guests\": [ { \"guestId\": \"G333\", \"name\": \"John Smith\", \"email\": \"jsmith@email.net\", \"phoneNumber\": \"(64) 021021021021\", \"anotherDetail\": \"another detail\" }, { \"guestId\": \"G444\" } ] } . Non-existing bookings should return a 404 status code with a message indicating the booking was not found. { \"success\": false, \"message\": \"Booking ABC123 not found.\" } . ",
    "url": "/docs/integrations/endpoints/booking_details.html",
    "relUrl": "/docs/integrations/endpoints/booking_details.html"
  },"5": {
    "doc": "Booking of Groups or Vehicles",
    "title": "Booking of Groups or Vehicles",
    "content": "Booking of Groups or Vehicles . Sometimes the quantity of a booked activity does not match the final number of expected passengers (pax). In these cases and depending on the type of activity, the expected number of guests may need to be calculated by multiplying the booked quantity by either a fix multiplier, or a multiplier defined by the booker (input field). Example A: . 5x Double Kayaks . In this case the fix multiplier would be 2, therefore 5 booked Double Kayaks should allow for up to 10 pax. Example B: . 1x Forest Guided Group Tour . In this other example, the activity may not have a pre-defined number of expected guests and instead the booking system could allow the booker to define the expected guests by completing an extra field ex. “How many people are in your group?”. Pax calculated at booking system . Ideally, your booking system should translate these scenarios and provide the final number of expected pax in the booking details. Pax calculated at Wherewolf . If your booking system is unable to determine the expected or maximum pax for a booked activity, please let our team know about this limitation so alternative solutions can be agreed. Wherewolf can potentially: . | Configure a fixed multiplier on defined activities (Kayak scenario). | Accept an alternative and final value from a field defined on the booking. (“How many people are in your group?” at top level). | Accept a multiplier from a field defined on the booking. (“How many people are in your group?” at activity item level). | . ",
    "url": "/docs/integrations/booking_groups_and_vehicles.html",
    "relUrl": "/docs/integrations/booking_groups_and_vehicles.html"
  },"6": {
    "doc": "Booking Status",
    "title": "Booking Status",
    "content": "Booking Status . Booking systems do use of all sorts of statuses depending on their supported use cases. At Wherewolf, we found that despite the diverse ecosystem the following list of statuses are enough for our use case. | Pending (unpaid or partially paid) | Active (confirmed) | Rebooked (cancelled but linked to a new one) | Deleted (cancelled) | . If your system do use of more statuses, you will need to map them accordingly to categorise the bookings into one of these. Statuses are strings: Pending, Active, Rebooked and Deleted. Note: Booking statuses are not the same as Guest statuses. Check guest update payload here . ",
    "url": "/docs/integrations/booking_status.html",
    "relUrl": "/docs/integrations/booking_status.html"
  },"7": {
    "doc": "Bookings",
    "title": "Bookings",
    "content": "Bookings endpoint . Returns a list of bookings for a given time period and specified Wherewolf app. Note: the returned list is expected to contain all bookings in any of the recognised statuses. Parameters: . | pool string to identify the Wherewolf app from where the bookings are requested. | fromDate is the start date and time for the required period, ISO 8601 UTC | toDate is the end date and time for the required period, ISO 8601 UTC | skip integer to indicate how many records are to be skipped. | . Headers: . | API-key API key to authenticate the request. | . Request example . curl -X GET \\ __BOOKING_SYSTEM_API__/bookings?pool=wherewfolapp123&amp;fromDate=2018-01-01T00:00:00.000Z&amp;toDate=2018-01-14T23:59:59.000Z&amp;skip=0 \\ -H 'API-key: 123-123-123-123' . Where BOOKING_SYSTEM_API is a placeholder for the base url of your booking system’s API . The response is expected to return an object containing at least two properties: . | bookings an array of booking objects, where each object should at least contain a reference to the booking id. | more a boolean flag to indicate if there are more bookings available to be retrieved with pagination. When set to true, Wherewolf will execute a subsequent call with skip set to be the number of already retrieved booking id’s skip += bookings.length. | . Response example . { \"bookings\": [ { \"id\": 123 }, { \"id\": 124 }, { \"id\": 125 } ], \"more\": false } . Optionally, each booking object may be already fully populated with the booking details . ",
    "url": "/docs/integrations/endpoints/bookings.html",
    "relUrl": "/docs/integrations/endpoints/bookings.html"
  },"8": {
    "doc": "Booking Created, Updated or Deleted",
    "title": "Booking Created, Updated or Deleted",
    "content": "Booking Created or Updated Webhook . All new bookings or any change that affect bookings previously created should trigger a call to a Wherewolf endpoint, this will cause Wherewolf to fetch the new or updated details. Cancellations: A cancellation or deletion also needs to trigger a call to Wherewolf, this is required so any pending jobs can be also cancelled. Note: already checked-in guests will not have their details updated. Headers: . | Content-Type: application/json' required to indicate the body structure. | . Body: . | id id to indicate the booking to be fetched. | key API key provided by Wherewolf. | pool string to identify the target Wherewolf app. | . Request example . curl -X POST \\ https://api.wherewolf.co.nz/integration/cache \\ -H 'Content-Type: application/json' \\ -d '{ \"id\": \"ABC123\", \"key\": \"api_key_provided_by_wherewolf\", \"pool\": \"wherewolf_app_identifier\" }' . Response example . { \"success\": true, \"bookings\": [ { \"id\": \"ABC123\", ... \"web\": { \"preArrival\": \"https://mono.wherewolf.co.nz/QWER12\" } } ] } . Response structure details: . | success indicates if we were able to process the payload. | bookings is an array that either will contain 1 item to describe the received booking or be empty. A success response with an empty array indicates Wherewolf accepted the booking but the booking is being ignored, some causes for Wherewolf to ignore bookings are: there is no valid configuration for the product/activity of the booking or the booking status does not indicate it is an active and enabled for use. | bookings[0].web.preArrival when present, is the link that participants of the booking can use to sign waivers. This link can be stored by the booking system and then shared with the participants of the booking. NOTE this might not be present if Wherewolf is not configured with the correct TsCs for the activities/products specified in the booking. | bookings[0].web.base when present, is the link that participants of the booking can use to sign waivers. This link can be stored by the booking system and then shared with the participants of the booking. NOTE this might not be present if Wherewolf is not configured with the correct TsCs for the activities/products specified in the booking. | . Pre-arrival links preArrival vs base: . preArrival is the legacy name given to these links, newer apps will return with base instead of preArrival. When base is present, it should be used instead of preArrival. ",
    "url": "/docs/integrations/webhooks/cache.html",
    "relUrl": "/docs/integrations/webhooks/cache.html"
  },"9": {
    "doc": "Booking Created or Updated (operational)",
    "title": "Booking Created or Updated (operational)",
    "content": "Booking Created or Updated Webhook . All new bookings or any change that affect bookings previously created should trigger a call to an Wherewolf endpoint, this will cause Wherewolf to fetch the new or updated details. Note: already checked-in guests will not have their details updated. Headers: . | Content-Type: application/json' required to indicate the body structure. | . Body: . | id id to indicate the booking to be fetched. | key API key provided by Wherewolf. | pool string to identify the target Wherewolf app. | . Request example . curl -X POST \\ https://api.wherewolf.co.nz/integration/cache \\ -H 'Content-Type: application/json' \\ -d '{ \"id\": \"ABC123\", \"key\": \"api_key_provided_by_wherewolf\", \"pool\": \"wherewolf_app_identifier\" }' . Response example . { \"success\": true, \"bookings\": [ { \"id\": \"ABC123\", ... \"web\": { \"preArrival\": \"https://web.wherewolf.co.nz/QWER12\" } } ] } . ",
    "url": "/docs/integrations/webhooks/cache_operational.html",
    "relUrl": "/docs/integrations/webhooks/cache_operational.html"
  },"10": {
    "doc": "Known caveats and notes",
    "title": "Known caveats and notes",
    "content": "Known caveats and notes . A common question we receive from booking systems willing to integrate with Wherewolf is: . Why Wherewolf requires a booking details API endpoint if all the booking information could be sent over within the webhook call? . Wherewolf hesitance on relying only on webhook calls comes from previous experiences that resulted in extra work required, mainly: . | Booking systems will often queue the update calls (so these can be re-issued if/when failed), but calls from these queues can get out of order and/or arrive at the same time (specially for booking systems where the order is confirmed on a 1st step and details are optionally added in subsequent steps). Including an “updatedAt” in the payload and then ignoring calls with older timestamps is a common solution for this scenario, but this only works when you can ensure calls are arriving one after another. When calls arrive at the same time to Wherewolf, they could get assigned to different workers and processed at the same time. Therefore, each individual process can’t rely on the timestamp alone anymore causing the need for locks, and a buffer/queue to ensure only one update is executed at any given time. From previous experiences, this added complexity is in general not worth it. | Back-fills, when integrating new clients Wherewolf needs to retrieve any already made booking for the near future (commonly one year). Booking systems could expose an endpoint to allow Wherewolf to trigger webhooks for all bookings with future dates, but this does not provide any way to control the flood of calls that a big client could cause. | There is no way for Wherewolf to know if there were update calls that never arrived, and, at the end of the day Wherewolf is responsible on what is being displayed in the iPad at location, and is this the reason why (depending on the integration type) Wherewolf will re-fetch the booking details for the current day (or beyond) on well spaced intervals to ensure consistency against webhook calls. | . ",
    "url": "/docs/integrations/webhooks/caveats.html",
    "relUrl": "/docs/integrations/webhooks/caveats.html"
  },"11": {
    "doc": "Expected endpoints",
    "title": "Expected endpoints",
    "content": "Expected API endpoints . To allow Wherewolf to retrieve information from your booking system, the following endpoints are required: . | Bookings, this endpoint returns a list of bookings for a given time period and Wherewolf app. | Booking Details, returns all available details for a given booking id. | Get Activities, returns a list of activities and their codes (or IDs) for a specified Wherewolf app. | Healthcheck &amp; Credentials validation, validates access and returns common properties to validate configuration. | . To allow Wherewolf to share guest details back to your booking system, an extra endpoint is required (2-way integration): . | Guest Update, accepts a POST call for each of the guest details Wherewolf is able to capture. | . ",
    "url": "/docs/integrations/endpoints.html",
    "relUrl": "/docs/integrations/endpoints.html"
  },"12": {
    "doc": "Available Endpoints",
    "title": "Available Endpoints",
    "content": "Available Endpoints . There is no public documentation for available endpoints, please contact our support team to discuss your requirements and the best course of action. ",
    "url": "/docs/api/endpoints.html",
    "relUrl": "/docs/api/endpoints.html"
  },"13": {
    "doc": "Example Call",
    "title": "Example Call",
    "content": "Example Call . curl -X POST \\ __YOUR_URL__ \\ -H 'Cache-Control: no-cache' \\ -H 'Content-Type: application/json' \\ -H '__CUSTOM_AUTH_FIELD__: __CUSTOM_AUTH_VALUE__' \\ -d '{ guest: { \"activities\": [ \"PJAX10\" ], \"createdAt\": \"2019-01-21T22:08:03.969Z\", \"currentPage\": null, \"feedback\": \"Great thx\", \"lastVisit\": \"2019-01-21T22:08:03.899Z\", \"pool\": \"demo\", \"status\": \"Active\", \"id\": \"Dummy9gyrk55an4qi0ds54ck1\", \"updatedAt\": \"2019-01-21T22:08:03.970Z\", \"reservationsID\": null, \"reservationsService\": \"bookeo\" }, }' . Where: . | __YOUR_URL__ is the url of the endpoint you created to receive calls. | __CUSTOM_AUTH_FIELD__ and __CUSTOM_AUTH_VALUE__ are values we can set if you require a special header. | . Example Payload . { \"guest\": { \"activities\": [ \"PJAX10\" ], \"createdAt\": \"2019-01-21T22:08:03.969Z\", \"currentPage\": null, \"feedback\": \"Great thx\", \"lastVisit\": \"2019-01-21T22:08:03.899Z\", \"pool\": \"demo\", \"status\": \"Active\", \"id\": \"Dummy9gyrk55an4qi0ds54ck1\", \"updatedAt\": \"2019-01-21T22:08:03.970Z\", \"reservationsID\": null, \"reservationsService\": \"bookeo\" } } . Many other properties may be present in the guest object depending on webhook configuration and the available fields for the Wherewolf app. ",
    "url": "/docs/webhooks/example_call.html",
    "relUrl": "/docs/webhooks/example_call.html"
  },"14": {
    "doc": "Flow of information",
    "title": "Flow of information",
    "content": "Flow of information . Wherewolf will regularly fetch a list of bookings for a time frame from the booking system API. This list is used to fill the list of expected guests for a day and to fill a calendar that helps with operations. Learn more about this on Bookings endpoint. To speed up this process, the booking system provider can execute a Webhook call to notify Wherewolf about new or updated bookings. Learn more on Booking Created or Updated webhook. Once a guest has finished the check-in process, Wherewolf will inform the booking system that a waiver has been signed by executing a webhook call. Learn more on Guest update endpoint. ",
    "url": "/docs/integrations/flow.html",
    "relUrl": "/docs/integrations/flow.html"
  },"15": {
    "doc": "Guest Update",
    "title": "Guest Update",
    "content": "Guest Update endpoint . Accepts a POST call and stores waiver details as seen fit. Wherewolf will call this endpoint to share a waiver signed by a guest, this allows your system to create or extend guest details and know when a waiver has been signed. After a guest have signed a waiver, or after any other update is performed on a waiver record. Wherewolf will execute a POST call to a Guest Update endpoint on your booking system API. Parameters (on path or as query string): . | bookingId the booking id | bookingGuestId the guest id provided originally with the booking details (if available) | . Headers: . | API-key API key to allow the request. | . Body: . | waiver.id the Wherewolf waiver id, will be unique across all waivers (you can use it to detect update calls). Be aware the waiver ID is a string with a max of 256 bytes, and it may contain non url safe characters. | waiver.pool is the ID used by Wherewolf to identify a Wherewolf app, your endpoint may use this to match the waiver to an account/client. | waiver.bookingId the booking id. | waiver.bookingGuestId the booking system’s guest id provided originally with the booking details (if available) | waiver.lastVisit the date and time of the activity/activities the guest is checking-in. UTC ISO 8601. | waiver.status indicates the current waiver status. Checked In, Active, Finalised, Deleted, Ineligible, Loaded, No-Show. | waiver.updatedAt the date and time of the last update stored for this record. UTC ISO 8601. | . Note: Other properties may be available depending on use cases, check the “Other Properties” down on this page . Request example . This is an example, you may have another url structure . curl -X POST \\ __BOOKING_SYSTEM_API__/bookings/ABC123/guests/__URL_ENCODED_BOOKING_GUEST_ID_OR_WAIVER_ID__ \\ -H 'Content-Type: application/json' \\ -H 'API-key: 123-123-123-123' \\ -d '{ \"waiver\": { \"id\": \"abcdefg-12:30-1234567890#1\", \"pool\": \"qwerty123\", \"bookingId\": \"ABC123\", \"bookingGuestId\": \"G333\", \"lastVisit\": \"2018-01-27T11:27:00.000Z\", \"status\": \"Checked In\", \"updatedAt\": \"2018-01-27T11:21:33.444Z\" } }' . Where BOOKING_SYSTEM_API is a placeholder for the base url of your booking system’s API. And URL_ENCODED_BOOKING_GUEST_ID_OR_WAIVER_ID is the guest id from YOUR system bookingGuestId if/when provided, optionally this can be filled with the Wherewolf waiver.id or left empty. URL encoded when present. Response example . { \"success\": true } . Other Standard Properties . Depending on the use case, the process of check-in may capture other details from the guest, such as “Date Of Birth” or “Where did you hear about us”. When extra properties are available in the waiver, these could be included in the payload. When setting up your integration, you will need to decide and define what “Other Properties” may be of use for your clients (if any). By default, Wherewolf won’t send these unless deemed necessary for your use case and with express permission of your client in accordance to privacy regulation. While custom fields may be different for each operator’s app, there are some frequent questions that when in use will store the answer in predefined property names. Property names of frequently used questions . ",
    "url": "/docs/integrations/endpoints/guest_update.html",
    "relUrl": "/docs/integrations/endpoints/guest_update.html"
  },"16": {
    "doc": "Frequent Property Names",
    "title": "Frequent Property Names",
    "content": "Property names of frequently used questions . Depending on the questions configured on a Wherewolf app and the operator’s needs, the payload for the guest update endpoint may contain extra properties. The answers to the questions are stored in the waiver object, with property names that reflect the questions and can’t be known before the app is configured. While many of the questions will have custom property names, there are some frequent questions that will use known property names. When any of the following property names are included in the payload, the types and content are as follows: . | Name | Type | Example | Description | . | DOB | String | “1990-01-01” | The date of birth of the guest | . | activities | Array | [“activity1”, “activity2”] | The activities (codes) the guest is doing | . | email | String | “example@getwherewolf.com” | The email address of the guest | . | emergencyName | String | “Emergency Contact” | The name of the emergency contact | . | emergencyPhone | String | “123-123-123” | The phone number of the emergency contact | . | emergencyRelationship | String | “Relation” | The relationship of the emergency contact to the guest | . | experienceLevel | String | “Beginner” | The experience level of the guest | . | gender | String | “Male” | The guest gender | . | guardianName | String | “Guardian Name” | The name of the guardian | . | height | Decimal | 180 | The height of the guest expressed in cm | . | minor | String | empty, null, “true” or “false” | If the guest is a minor | . | name | String | “John Doe” | The full name of the guest | . | notes | String | “notes” | Any notes about the guest | . | notesAbility | String | “notes” | Any notes about the guest’s ability | . | notesEquipment | String | “notes” | Any notes about the guest’s equipment | . | phoneNumber | String | “123-123-123” | The phone number of the guest | . | site | String | “Down Town” | The operator location when multiple are available | . | staff | String | “Staff Name” | The staff member assigned to the guest | . | weight | Decimal | 80 | The weight of the guest expressed in kg | . | weightEquipment | Decimal | 10 | The weight of the equipment the guest is carrying | . | whatAgeRange | String | “18-25” | Age range of checkin, in format “ - \" or \"+\" e.g. '0 - 16', or '45+' | . | whereDidYouHearAboutUs | String | “Google” | Where the guest heard about the operator | . Request example containing some of the common properties: . This is an example, you may have another url structure . curl -X POST \\ __BOOKING_SYSTEM_API__/bookings/ABC123/guests/__URL_ENCODED_BOOKING_GUEST_ID_OR_WAIVER_ID__ \\ -H 'Content-Type: application/json' \\ -H 'API-key: 123-123-123-123' \\ -d '{ \"waiver\": { \"id\": \"abcdefg-12:30-1234567890#1\", \"pool\": \"qwerty123\", \"name\": \"Jhon Smith\", \"email\": \"example@getwherewolf.com\", \"DOB\": \"1966-11-25\", \"activities\": [\"activity1\", \"activity2\"], \"weight\": 80, \"bookingId\": \"ABC123\", \"bookingGuestId\": \"G333\", \"lastVisit\": \"2018-01-27T11:27:00.000Z\", \"status\": \"Checked In\", \"updatedAt\": \"2018-01-27T11:21:33.444Z\" } }' . ",
    "url": "/docs/integrations/endpoints/guest_update_frequent_props.html",
    "relUrl": "/docs/integrations/endpoints/guest_update_frequent_props.html"
  },"17": {
    "doc": "Guest Update (operational)",
    "title": "Guest Update (operational)",
    "content": "THE FOLLOWING SPECS ARE BASED ON THE CLIENT DISPLAYING THE NAME/EMAIL/DOB/STATUS/COMBINEDNOTES IN THE DASHBOARD FOR OPERATIONAL SAFETY USE. Guest Update endpoint (operational safety use) . Accepts a POST call and stores guest’s details as seen fit. Wherewolf will call this endpoint to share the details and status of the guest, this allows your system to store guest details and know if a waiver has been signed. After a guest have signed a waiver, or after any other update is performed on a guest record. Wherewolf will execute a POST call to a Guest Update endpoint on the booking system API. Parameters (on path or query string): . | bookingId the booking id | id the guest id provided originally with the booking details (if available) | . Headers: . | API-key API key to allow the request. | . Body: . | guest.remoteId the guest id provided originally with the booking details (if available) | guest.id the Wherewolf guest/waiver id, will be unique across all guests (you can use it to detect update calls). Be aware the guest ID is a string with a max of 256 bytes, and it may contain non url safe characters. | guest.pool is the ID used by Wherewolf to identify a Wherewolf app. | guest.bookingId the booking id. | guest.lastVisit the date and time of the activity/activities the guest is checking-in. UTC ISO 8601. | guest.status indicates the current guest status. Active, Blank, Checked In, Deleted, Finalised, Incomplete, Ineligible, Loaded, No-Show, Started. | guest.combinedNotes Text field to contain any special data required by our mutual client, such as meals, insurance details, approvals or signature information.. | guest.updatedAt the date and time of the last update stored for this record. UTC ISO 8601. | . Request example . curl -X POST \\ __BOOKING_SYSTEM_API__/bookings/ABC123/guests/__URL_ENCODED_GUEST_ID__ \\ -H 'Content-Type: application/json' \\ -H 'API-key: 123-123-123-123' \\ -d '{ \"guest\": { \"remoteId\": \"G333\", \"id\": \"abcdefg-12:30-1234567890#1\", \"pool\": \"qwerty123\", \"bookingId\": \"ABC123\", \"lastVisit\": \"2018-01-27T11:27:00.000Z\", \"status\": \"Checked In\", \"combinedNotes\": \"Text to contain any special data required by our mutual client, such as meals, insurance details, approvals or signature information.\", \"updatedAt\": \"2018-01-27T11:21:33.444Z\" } }' . Where BOOKING_SYSTEM_API is a placeholder for the base url of your booking system’s API . And URL_ENCODED_GUEST_ID is the guest id from YOUR system (remoteId) if/when provided, optionally this can be filled with the Wherewolf guest.id or left empty (URL encoded when present) . Response example . { \"success\": true } . Other Standard Properties . Depending on the use case, the process of check-in may capture other details from the guest, such as “Date Of Birth” or “Where did you hear about us”. When extra properties are available, these could be included in the payload. When setting up your integration, you will need to decide and define what “Other Properties” may be of use for your clients (if any). By default, Wherewolf won’t send these unless deemed necessary for your use case and with express permission of your client in accordance to privacy regulation. Standard Properties included for operational safety use . | Name | Type | Format | Description | . | name | String | Forename Surname | Guest’s full name. | . | email | String | user@domain.ext | email address. | . | DOB | String | YYYY-MM-DD | Date of birth. | . Request example . curl -X POST \\ __BOOKING_SYSTEM_API__/bookings/ABC123/guests/G333 \\ -H 'Content-Type: application/json' \\ -H 'API-key: 123-123-123-123' \\ -d '{ \"guest\": { \"remoteId\": \"G333\", \"id\": \"abcdefg1234567890\", \"pool\": \"qwerty123\", \"bookingId\": \"ABC123\", \"lastVisit\": \"2018-01-27T11:27:00.000Z\", \"status\": \"Checked In\", \"combinedNotes\": \"Approved by: Jason Blunt\", \"updatedAt\": \"2018-01-27T11:21:33.444Z\", \"name\": \"Jhon Smith\", \"email\": \"example@getwherewolf.com\", \"DOB\": \"1966-11-25\" } }' . Where BOOKING_SYSTEM_API is a placeholder for the base url of your booking system’s API . Response example . { \"success\": true } . PDF waiver . The url for the pdf waiver is https://api.wherewolf.co.nz/pdf/guest. It requires the pool and guest ID as query parameters. Example: . https://api.wherewolf.co.nz/pdf/guest?pool=qwerty123&amp;id=abcdefg1234567890 . ",
    "url": "/docs/integrations/endpoints/guest_update_operational.html",
    "relUrl": "/docs/integrations/endpoints/guest_update_operational.html"
  },"18": {
    "doc": "Healthcheck & Credentials validation",
    "title": "Healthcheck & Credentials validation",
    "content": "Healthcheck &amp; Credentials validation . To ensure a Wherewolf app has been correctly configured to access your booking system API, an endpoint to validate the access key and configuration should be provided. Parameters: . | pool string to identify the Wherewolf app to validate. | . Headers: . | API-key API key to authenticate the request. | . Request example . curl -X GET \\ __BOOKING_SYSTEM_API__/healthcheck?pool=wherewfolapp123 \\ -H 'API-key: 123-123-123-123' . Where BOOKING_SYSTEM_API is a placeholder for the base url of your booking system’s API . The response should return a 401 when there is no matching configuration for the Wherewolf app or when the API key is not allowed to access the resources of the configured Wherewolf app. When the request is valid, the response should be an object containing the following properties: . | companyName The name of the mutual client company. Example: Wherewolf Adventures. | timezone the timezone on which the client company operates. Example: Pacific/Auckland. Important! . The timezone your booking system API returns in this health check is only to validate Wherewolf and your systems are configured in the same way. All booking dates MUST be expressed in UTC. The timezone returned in this endpoint DOES NOT have any effects on booking dates. | . Response example . { \"companyName\": \"Wherewolf Adventures\", \"timezone\": \"Pacific/Auckland\" } . ",
    "url": "/docs/integrations/endpoints/healthcheck.html",
    "relUrl": "/docs/integrations/endpoints/healthcheck.html"
  },"19": {
    "doc": "Welcome",
    "title": "Welcome",
    "content": "This site contains technical information on how to interact with Wherewolf. If you are looking for help on how to setup your app, please use the Support Portal. ",
    "url": "/",
    "relUrl": "/"
  },"20": {
    "doc": "Booking Systems Integrations",
    "title": "Booking Systems Integrations",
    "content": "Booking systems integrations . Wherewolf is currently integrated with major booking systems, these integrations are made possible by the use of API and Webhook calls. This section outlines the workflow and requirements to successful integrate your booking system with Wherewolf using API and Webhook calls. Glossary . | Client: the company using Wherewolf and a booking system to manage guest’s bookings and waivers. | App: is a Wherewolf app (aka account) configured accordingly to meet the requirements of a client company. | pool: is an unique string to identify a Wherewol app. | Guest: the final customer for who a booking is made. | Booking: a reservation or booking made for an activity. | Activity: is an activity, rental, service or product that can be booked by the guests. | . ",
    "url": "/docs/integrations",
    "relUrl": "/docs/integrations"
  },"21": {
    "doc": "Objectives",
    "title": "Objectives",
    "content": "Objectives . There are three main objectives when integrating your booking system with Wherewolf, being: . | Obtain guest data submitted in the booking process in order to avoid repetition by “pre-filling” waiver questions and speeding up the check-in. | Use guest email address (supplied in the booking) to automatically send a pre-arrival link email to the guest, allowing waiver completion prior to arrival (speeding up onsite check-in, reducing queues and improving guest convenience). | React to booking changes where amendments might be required before guest arrival. | Send waivers or guest details back to the booking system after check-in is completed (2-way integration). | . ",
    "url": "/docs/integrations/objectives.html",
    "relUrl": "/docs/integrations/objectives.html"
  },"22": {
    "doc": "Obtaining API Key",
    "title": "Obtaining API Key",
    "content": "Obtaining an API Key and Pool . To interact with the API you will need to first get an API key and a pool reference. The API key is used alongside username as a replacement for the password. The pool indicates the target Wherewolf app for your requests. Get the API key and pool for your user by using the /user/login endpoint. curl -X POST \\ https://api.wherewolf.co.nz/user/login \\ -H 'Cache-Control: no-cache' \\ -H 'Content-Type: application/json' \\ -d '{ \"user\": \"your_user_name\", \"pass\": \"your_password\" }' . The response will then contain details about your user and the Wherewolf app(s) linked to it. Inside the returned object, you will find the properties key and pool. { ... \"key\": \"___API___KEY___HERE___\", \"pool\": \"___POOL___HERE___\", ... } . Multiple Apps? . If your user is granted with access to multiple apps, you will find a list of these inside poolsAvailableComplete. { ... \"key\": \"___API___KEY___HERE___\", \"pool\": \"___DEFAULT___POOL___HERE___\", ... \"poolsAvailableComplete\": [ { \"pool\": \"ABC123\", \"poolName\": \"One App\" }, { \"pool\": \"ABC123\", \"poolName\": \"Another App\" } ... } . Note: All API interactions are performed against one Wherewolf App (defined within the request). This means that if (as an example) you are trying to get a list of guests from multiple Apps, you will be required to perform multiple calls. Also have in mind that it is not common to have users with access granted to multiple Wherewolf Apps, this is reserved to a few special cases. ",
    "url": "/docs/api/obtaining_API_key.html",
    "relUrl": "/docs/api/obtaining_API_key.html"
  },"23": {
    "doc": "Payload Details",
    "title": "Payload Details",
    "content": "Payload details . Webhook calls may differ depending on the use case, and the fields to be exposed and included in the call will be defined in a case by case scenario. Available fields, their data types and the reasons behind why they should be included in a webhook call will also be discussed in a case by case scenario. ",
    "url": "/docs/webhooks/payload.html",
    "relUrl": "/docs/webhooks/payload.html"
  },"24": {
    "doc": "New Integrations",
    "title": "New Integrations",
    "content": "New Integration Process . The following steps are an overview of what the process of integrating your booking system with Wherewolf looks like: . | Integrations between booking systems and Wherewolf are expected to be discussed and agreed before work using this documentation is started. | Once an integration is agreed: . | A Wherewolf developer will be assigned to be available to provide support during the entire process of development, deployment and testing. | In order for Wherewolf to make use of the compatible API endpoints that will be created and then available on the booking system, a companion service must be developed and deployed at Wherewolf. This service will be created and deployed as soon as endpoints are available at the booking system to be used (you are welcome to create placeholders which will allow the service to be deployed while the work is still in progress). | With compatible API endpoints available on the booking system and with the companion service working at Wherewolf, internal testing can begin (once the companion service is available you can use it to help in your development process as long as no real guest information is used). For this, Wherewolf will provide a dev account to be integrated with a dev account in the booking system. | . | Onboarding processes are agreed so both support teams know what are the steps involved when a new mutual client requests integration of their accounts. These steps may vary depending on the level of integration, some booking systems allow their clients to setup the integration themselves while others may require Wherewolf support team to contact them directly to organize any relevant configuration. | You will provide a production account in order to test the integration in full. This account will continue to be used in the future for the debugging of any reported issues and ensuring everything continues to operate as it should during the years. | After development and internal testing. Live testing can begin with one mutual client. | Public documentation and marketing. | . ",
    "url": "/docs/integrations/process.html",
    "relUrl": "/docs/integrations/process.html"
  },"25": {
    "doc": "Requirements",
    "title": "Requirements",
    "content": "Requests and format . | All exchange of data is made using JSON and standard HTTP requests to API endpoints. | All datetimes are to be expressed in UTC. | . Your booking system should provide . | An API key, to grant Wherewolf with access to your booking system API. | The endpoints described in Expected endpoints. | The webhook calls described in Expected webhooks. | . ",
    "url": "/docs/integrations/requirements.html",
    "relUrl": "/docs/integrations/requirements.html"
  },"26": {
    "doc": "Store Booking Created or Updated (operational)",
    "title": "Store Booking Created or Updated (operational)",
    "content": "THE FOLLOWING SPECS ARE FOR SPECIAL USE CASES AND NOT THE RECOMMENDED WAY TO INTEGRATE. Booking Created or Updated Webhook . All new bookings or any change that affect bookings previously created should trigger a call to a Wherewolf endpoint providing a full booking object, Wherewolf will store the booking details to be used accordingly. Note: already checked-in guests will not have their details updated. Headers: . | Content-Type: application/json' required to indicate the body structure. | . URL: . | POST to https://api.wherewolf.co.nz/integration/storeBooking?type=BOOKING_SYSTEM_TYPE&amp;key=KEY | type is a required string to identify the booking system that is calling. | key API key provided by Wherewolf (optional when present in the body payload). | . Body: . | key API key provided by Wherewolf (optional when present in url as query params). | pool string to identify the target Wherewolf app (optional for Fareharbor payloads). | booking the full booking object. | . Request example . curl -X POST \\ https://api.wherewolf.co.nz/integration/storeBooking?type=BOOKING_SYSTEM_TYPE&amp;key=KEY \\ -H 'Content-Type: application/json' \\ -d '{ \"pool\": \"ABC123\", \"key\": \"api_key_provided_by_wherewolf\", \"booking\": { ... booking object ...} }' . Response example . { \"success\": true, \"bookings\": [ { \"id\": \"ABC123\", ... \"web\": { \"preArrival\": \"https://mono.wherewolf.co.nz/QWER12\" } } ] } . Response structure details: . | success indicates if we were able to process the payload. | bookings is an array that either will contain 1 item to describe the received booking or be empty. A success response with an empty array indicates Wherewolf accepted the booking but the booking is being ignored, some causes for Wherewolf to ignore bookings are: there is no valid configuration for the product/activity of the booking or the booking status does not indicate it is an active and enabled for use. | bookings[0].web.preArrival when present, is the link that participants of the booking can use to sign waivers. This link can be stored by the booking system and then shared with the participants of the booking. NOTE this might not be present if Wherewolf is not configured with the correct TsCs for the activities/products specified in the booking. | bookings[0].web.base when present, is the link that participants of the booking can use to sign waivers. This link can be stored by the booking system and then shared with the participants of the booking. NOTE this might not be present if Wherewolf is not configured with the correct TsCs for the activities/products specified in the booking. | . Pre-arrival links preArrival vs base: . preArrival is the legacy name given to these links, newer apps will return with base instead of preArrival. When base is present, it should be used instead of preArrival. ",
    "url": "/docs/integrations/webhooks/store_booking_operational.html",
    "relUrl": "/docs/integrations/webhooks/store_booking_operational.html"
  },"27": {
    "doc": "Trigger Test Calls",
    "title": "Trigger Test Calls",
    "content": "Trigger Test Calls . In order to receive webhook calls you need to check-in guests or update them. Once your endpoint has been configured under a Wherewolf app, you will be able to trigger test calls by checking in guests on the configured app. ",
    "url": "/docs/webhooks/trigger_tests.html",
    "relUrl": "/docs/webhooks/trigger_tests.html"
  },"28": {
    "doc": "Expected webhooks",
    "title": "Expected webhooks",
    "content": "Expected Webhook calls . | Booking Created or Updated, all new bookings or any change that affect bookings previously created should trigger a call to an Wherewolf endpoint, this will cause Wherewolf to fetch the new or updated details. Note: already checked-in guests will not have their details updated. | . ",
    "url": "/docs/integrations/webhooks.html",
    "relUrl": "/docs/integrations/webhooks.html"
  },"29": {
    "doc": "Webhooks",
    "title": "Webhooks",
    "content": "Webhooks . Wherewolf apps can be configured to issue webhook requests to external services. When enabled, a POST request will be issued every time a guest record is created or updated. A guest record is created every time a guest signs a Pre Arrival form or waiver. A guest record is updated when the check-in process happens in multiple stages and/or when a staff member perform some action on it such as assign some equipment or place some internal note. Requirements . You need to provide an url that accepts a POST request with Content-Type: application/json . ",
    "url": "/docs/webhooks",
    "relUrl": "/docs/webhooks"
  }
}
